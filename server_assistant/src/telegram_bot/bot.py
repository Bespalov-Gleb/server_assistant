import os
import logging
from dotenv import load_dotenv
import telebot
from telebot.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import sys
import json
from datetime import datetime, timedelta
import threading
from src.utils.message_type_detector import MessageTypeDetector

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
from src.neural_networks.guide_network import GuideNetwork
from src.neural_networks.deepseek_processor import DeepSeekProcessor
from src.neural_networks.openai_processor import OpenAIProcessor
from src.audio_processing.speech_recognition import AudioTranscriber
from src.audio_processing.voice_synthesis import VoiceSynthesizer
from src.utils.user_preferences import UserPreferences
from src.neural_networks.dialog_manager import DialogManager

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class TelegramAssistantBot:
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –∏ –±–æ—Ç–∞
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.message_type_detector = MessageTypeDetector()
        if not self.token:
            raise ValueError("Telegram Bot Token –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        self.bot = telebot.TeleBot(self.token)
        self.logger = logger
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.guide_network = GuideNetwork(bot=self.bot)
        self.audio_transcriber = AudioTranscriber()
        self.voice_synthesizer = VoiceSynthesizer()
        self.user_preferences = UserPreferences()

        self.reminder_file = 'temp/reminders.json'
        self.reminders = self.load_reminders()
        #self.start_reminder_thread()
        
        # –°–ª–æ–≤–∞—Ä—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
        self.llm_processors = {
            'deepseek': DeepSeekProcessor(),
            'openai': OpenAIProcessor()
        }
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é dialog_manager
        self.dialog_manager = DialogManager(
            max_context_length=50,  # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
            context_file=f'temp/dialogue_context.json'
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._register_handlers()

    def load_reminders(self):
        if os.path.exists(self.reminder_file):
            with open(self.reminder_file, 'r', encoding='utf-8') as f:
                content = f.read()
                if content:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
                    return json.loads(content)
                else:
                    return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π
        else:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            with open(self.reminder_file, 'w', encoding='utf-8') as f:
                json.dump([], f)
            return []

    def save_reminders(self):
        with open(self.reminder_file, 'w', encoding='utf-8') as f:
            json.dump(self.reminders, f)

    def add_reminder(self, reminder_text, reminder_time, reminder_type='one-time', user_id=None):
        reminder = {
            'id': len(self.reminders) + 1,
            'text': reminder_text,
            'time': reminder_time.isoformat(),
            'type': reminder_type,
            'user_id': user_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        }
        self.reminders.append(reminder)
        self.save_reminders()

        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        threading.Thread(target=self.wait_and_notify, args=(reminder,)).start()

    def wait_and_notify(self, reminder):
        reminder_time = datetime.fromisoformat(reminder['time'])
        time_to_wait = (reminder_time - datetime.now()).total_seconds()
        if time_to_wait > 0:
            time.sleep(time_to_wait)
            message_text = f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder['text']}"

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            user_id = reminder['user_id']  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.bot.send_message(user_id, message_text)  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            if reminder['type'] == 'one-time':
                self.reminders.remove(reminder)  # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                self.save_reminders()
            elif reminder['type'] == 'constant':
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ —Å—É—Ç–∫–∏ –≤–ø–µ—Ä–µ–¥
                new_reminder_time = reminder_time + timedelta(days=1)
                self.add_reminder(reminder['text'], new_reminder_time, 'constant')
                self.reminders.remove(reminder)  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                self.save_reminders()
    def delete_reminder(self, reminder_id):
        self.reminders = [rem for rem in self.reminders if rem['id'] != reminder_id]
        self.save_reminders()

    def list_reminders(self):
        return self.reminders

    def start_reminder_thread(self):
        threading.Thread(target=self.check_reminders).start()

    def check_reminders(self):
        while True:
            now = datetime.now()
            if self.reminders:
                for reminder in self.reminders:
                    reminder_time = datetime.fromisoformat(reminder['time'])
                    if reminder_time <= now:
                        print(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder['text']}")  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
                        self.reminders.remove(reminder)
                        self.save_reminders()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    def _process_message(self, text: str, user_id: int) -> str:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º
        
        :param text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        model = self.user_preferences.get_llm_model(user_id)
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        processor = self.llm_processors.get(model, self.llm_processors['deepseek'])
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        # response = processor.process_with_retry(text)
        response = self.guide_network.process_message(text)
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç None –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏, –ø—Ä–æ–±—É–µ–º OpenAI
        if (response is None or 
            (isinstance(response, str) and "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å—Ä–µ–¥—Å—Ç–≤–∞" in response)):
            
            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç {model}, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ OpenAI")
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ OpenAI
            processor = self.llm_processors['openai']
            response = processor.process_with_retry(text)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if response is not None:
                self.user_preferences.set_llm_model(user_id, 'openai')
                self.logger.info(f"–ú–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞ OpenAI")
        
        return response

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        @self.bot.message_handler(commands=['start', 'help'])
        def send_welcome(message: Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help"""
            welcome_text = (
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. \n\n"
                "–ú–æ–≥—É –ø–æ–º–æ—á—å —Å:\n"
                "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏\n"
                "‚Ä¢ –†–µ—à–µ–Ω–∏–µ–º –∑–∞–¥–∞—á\n"
                "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ /select_model - –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –ò–ò\n"
                "‚Ä¢ /switch_model - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–æ–¥–µ–ª—å\n"
                "‚Ä¢ /check_balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å API\n\n"
                "–û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è!"
            )
            
            self.bot.reply_to(message, welcome_text)

        @self.bot.message_handler(commands=['select_model'])
        def select_model(message: Message):
            """–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ LLM"""
            markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
            markup.add(
                KeyboardButton('ü§ñ DeepSeek'),
                KeyboardButton('üåê ChatGPT')
            )
            self.bot.reply_to(
                message, 
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤:", 
                reply_markup=markup
            )

        @self.bot.message_handler(func=lambda message: message.text in ['ü§ñ DeepSeek', 'üåê ChatGPT'])
        def set_model(message: Message):
            """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
            model_map = {
                'ü§ñ DeepSeek': 'deepseek',
                'üåê ChatGPT': 'openai'
            }
            model_name = model_map.get(message.text, 'deepseek')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ API-–∫–ª—é—á–∞
            processor = self.llm_processors[model_name]
            if processor.validate_api_key():
                self.user_preferences.set_llm_model(message.from_user.id, model_name)
                model_info = processor.get_model_info()
                
                response = (
                    f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model_info['name']}\n"
                    f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {model_info['provider']}\n"
                    f"–ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {model_info['default_model']}"
                )
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                markup = ReplyKeyboardRemove()
                self.bot.reply_to(message, response, reply_markup=markup)
            else:
                self.bot.reply_to(
                    message, 
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å API-–∫–ª—é—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
                )

        @self.bot.message_handler(commands=['switch_model'])
        def switch_model(message: Message):
            """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏"""
            user_id = message.from_user.id
            current_model = self.user_preferences.get_llm_model(user_id)
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å
            new_model = 'openai' if current_model == 'deepseek' else 'deepseek'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ API-–∫–ª—é—á–∞
            new_processor = self.llm_processors[new_model]
            if new_processor.validate_api_key():
                self.user_preferences.set_llm_model(user_id, new_model)
                model_info = new_processor.get_model_info()
                
                response = (
                    f"üîÑ –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞ {model_info['name']}\n"
                    f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {model_info['provider']}"
                )
                self.bot.reply_to(message, response)
            else:
                self.bot.reply_to(
                    message, 
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ {new_model}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á."
                )

        @self.bot.message_handler(commands=['check_balance'])
        def check_balance(message: Message):
            """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏"""
            user_id = message.from_user.id
            model = self.user_preferences.get_llm_model(user_id)
            
            processor = self.llm_processors.get(model, self.llm_processors['deepseek'])
            
            if model == 'deepseek':
                if processor.validate_api_key():
                    self.bot.reply_to(message, "‚úÖ DeepSeek: API-–∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω")
                else:
                    self.bot.reply_to(message, "‚ùå DeepSeek: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–ª—é—á–æ–º")
            elif model == 'openai':
                if processor.validate_api_key():
                    self.bot.reply_to(message, "‚úÖ OpenAI: API-–∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω")
                else:
                    self.bot.reply_to(message, "‚ùå OpenAI: –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–ª—é—á–æ–º")

        @self.bot.message_handler(content_types=['text', 'voice'])
        def handle_message(message: Message):
            """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
            if message.content_type == 'text':
                # –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                handle_text_message(message)
            elif message.content_type == 'voice':
                # –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                handle_voice_message(message)

        @self.bot.message_handler(content_types=['text'])
        def handle_text_message(message: Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            response = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
            try:
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                response = self._process_message(message.text, message.from_user.id)
                
                if response:
                    self.bot.reply_to(message, response)
                else:
                    response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    self.bot.reply_to(message, response)
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                self.bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            
                

        @self.bot.message_handler(content_types=['voice'])
        def handle_voice_message(message: Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                file_info = self.bot.get_file(message.voice.file_id)
                downloaded_file = self.bot.download_file(file_info.file_path)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                with open('temp_voice_message.oga', 'wb') as new_file:
                    new_file.write(downloaded_file)
                
                # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ
                transcribed_text = self.audio_transcriber.transcribe_audio('temp_voice_message.oga')
                
                if transcribed_text:
                    self.dialog_manager.add_message(transcribed_text, role='user_voice')
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                    response = self._process_message(transcribed_text, message.from_user.id)
                    
                    if response:
                        # –°–∏–Ω—Ç–µ–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                        voice_response_path = self.voice_synthesizer.text_to_speech(response)
                        
                        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                        with open(voice_response_path, 'rb') as voice_file:
                            self.bot.send_voice(message.chat.id, voice_file)
                        
                        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                        os.remove(voice_response_path)
                
                # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                os.remove('temp_voice_message.oga')
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                self.bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        self.bot.polling(none_stop=True)

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    bot = TelegramAssistantBot()
    bot.start()

if __name__ == '__main__':
    main()