import os
import logging
import asyncio
import json
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import BufferedInputFile

import aiofiles

from src.neural_networks.router_network import OutputType
from src.neural_networks.guide_network import GuideNetwork
from src.neural_networks.dialog_manager import DialogManager
from src.utils.user_preferences import UserPreferences
from src.audio_processing.speech_recognition import AudioTranscriber
from src.audio_processing.voice_synthesis import VoiceSynthesizer
import glob

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class TelegramAssistantBot:
    def __init__(self, token):
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not self.token:
            raise ValueError("Telegram Bot Token –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        self.bot = Bot(token=token)
        self.dp = Dispatcher()
        self.logger = logger
        
        self.reminder_file = 'temp/reminders.json'
        self.reminders = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º    
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.user_preferences = UserPreferences()
        self.audio_transcriber = AudioTranscriber()
        self.voice_synthesizer = VoiceSynthesizer()
        self.dialog_manager = DialogManager()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._register_handlers()
        
        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        asyncio.create_task(self.initialize_reminders())
        asyncio.create_task(self.start_reminder_monitoring())

    async def initialize_reminders(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            self.reminders = await self.load_reminders()
            self.logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.reminders)} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            self.reminders = []

    async def load_reminders(self):
        try:
            if os.path.exists(self.reminder_file):
                async with aiofiles.open(self.reminder_file, 'r', encoding='utf-8') as f:
                    content = await f.read()
                    # –Ø–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –ø—É—Å—Ç–æ–π JSON
                    if content.strip() in ['', '[]', 'null']:
                        return []
                    try:
                        return json.loads(content)
                    except json.JSONDecodeError:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {content}")
                        return []
            else:
                # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                async with aiofiles.open(self.reminder_file, 'w', encoding='utf-8') as f:
                    await f.write('[]')
                return []
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            return []

    async def save_reminders(self):
        try:
            async with aiofiles.open(self.reminder_file, 'w', encoding='utf-8') as f:
                await f.write(json.dumps(self.reminders, ensure_ascii=False))
            
            self.logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(self.reminders)} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

    async def add_reminder(self, reminder_text, reminder_time, reminder_type='one-time', user_id=None):
        try:
            self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {reminder_text}, –≤—Ä–µ–º—è: {reminder_time}, —Ç–∏–ø: {reminder_type}")
            
            reminder = {
                'id': len(self.reminders) + 1,
                'text': reminder_text,
                'time': reminder_time.isoformat(),
                'type': reminder_type,
                'user_id': user_id
            }
            
            self.reminders.append(reminder)
            await self.save_reminders()
            
            self.logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫: {self.reminders}")
            
            # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            asyncio.create_task(self.wait_and_notify(reminder))
            return reminder
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
            return None

    async def wait_and_notify(self, reminder):
        try:
            reminder_time = datetime.fromisoformat(reminder['time'])
            time_to_wait = max((reminder_time - datetime.now()).total_seconds(), 0)
            await asyncio.sleep(time_to_wait)
            message_text = f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder['text']}"

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            user_id = reminder['user_id']  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await self.bot.send_message(user_id, message_text)
            except Exception as send_error:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {send_error}")
            
            self.reminders = [rem for rem in self.reminders if rem['id'] != reminder['id']]
            await self.save_reminders()
            
            # –î–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
            if reminder['type'] == 'constant':
                new_reminder_time = reminder_time + timedelta(days=1)
                await self.add_reminder(
                    reminder['text'], 
                    new_reminder_time, 
                    'constant', 
                    user_id
                )   
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ wait_and_notify: {e}")

    async def start_reminder_monitoring(self):
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        await asyncio.sleep(5)
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        while True:
            try:
                now = datetime.now()
                active_reminders = [
                    reminder for reminder in self.reminders 
                    if datetime.fromisoformat(reminder['time']) <= now
                ]
                
                for reminder in active_reminders:
                    asyncio.create_task(self.wait_and_notify(reminder))
                    
                # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                self.reminders = [
                    rem for rem in self.reminders 
                    if datetime.fromisoformat(rem['time']) > now
                ]
                await self.save_reminders()
                
                # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(60)
            
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
                await asyncio.sleep(60)

    async def _process_message(self, text: str, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º"""
        guide_network = GuideNetwork(bot=self.bot, user_id=user_id)
        response, output_type = await guide_network.process_message(text)
        if isinstance(response, list):
            if response[0] == "–ó–∞–ø—É—Å–∫":
                await self.add_reminder(response[1], response[2], response[3], user_id=user_id)
                response = f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {response[1]} –Ω–∞ {response[2]}"
        
        return response, output_type

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        @self.dp.message(Command('start'))
        async def send_welcome(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help"""
            welcome_text = (
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. \n\n"
                "–Ø –º–æ–≥—É:\n"
                "‚úâÔ∏è –û–±—â–∞—Ç—å—Å—è –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã\n"
                "üîç –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
                "üìÖ –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
                "üîä –ü—Ä–∏–Ω–∏–º–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
                "–û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è!"
            )
            
            await message.answer(welcome_text)

        @self.dp.message()
        async def handle_message(message: types.Message):
            """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
            response = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
            if message.content_type == types.ContentType.TEXT:
                try:
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    response, output_type = await self._process_message(message.text, message.from_user.id)
                    
                    if output_type == OutputType.TEXT:  
                        if response:
                            await message.reply(response)
                        else:
                            response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                            await message.reply(response)
                    elif output_type == OutputType.AUDIO:
                        if response:
                            # –°–∏–Ω—Ç–µ–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                            voice_response_path = self.voice_synthesizer.text_to_speech(response)
                            
                            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                            with open(voice_response_path, 'rb') as voice_file:
                                await message.answer_voice(BufferedInputFile(voice_file.read(), 'voice.oga'))
                            
                            # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                            os.remove(voice_response_path)

                    elif output_type == OutputType.MULTI:
                        if response:
                            await message.reply(response)
                            # –°–∏–Ω—Ç–µ–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                            voice_response_path = self.voice_synthesizer.text_to_speech(response)
                            
                            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                            with open(voice_response_path, 'rb') as voice_file:
                                await message.answer_voice(BufferedInputFile(voice_file.read(), 'voice.oga'))
                            
                            # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                            os.remove(voice_response_path)
                    elif output_type == OutputType.DEFAULT:
                        if response:
                            await message.reply(response)
                        else:
                            response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                            await message.reply(response)
                
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

            elif message.content_type == types.ContentType.VOICE:
                await handle_voice_message(message)

        @self.dp.message(lambda message: message.content_type == types.ContentType.VOICE)
        async def handle_voice_message(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                voice_file = message.voice
                self.logger.info('–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è')
                destination = os.path.join('temp', f'voice_{message.from_user.id}_{message.message_id}.oga')
                await self.bot.download(voice_file.file_id, destination=destination)
                self.logger.info(f'–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü—É—Ç—å: {destination}')
                
                # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ
                transcribed_text = self.audio_transcriber.transcribe_audio(destination)
                self.logger.info('–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∞—É–¥–∏–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
                
                if transcribed_text:
                    self.dialog_manager.add_message(transcribed_text, role='user_voice')
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                    response, output_type = await self._process_message(transcribed_text, message.from_user.id)
                    
                    if output_type == OutputType.TEXT:  
                        if response:
                            await message.reply(response)
                        else:
                            response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                            await message.reply(response)
                    elif output_type == OutputType.AUDIO:
                        if response:
                            # –°–∏–Ω—Ç–µ–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                            voice_response_path = self.voice_synthesizer.text_to_speech(response)
                            
                            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                            with open(voice_response_path, 'rb') as voice_file:
                                await message.answer_voice(BufferedInputFile(voice_file.read(), 'voice.oga'))
                            
                            # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                            os.remove(voice_response_path)
                    elif output_type == OutputType.MULTI:
                        if response:
                            await message.reply(response)
                            # –°–∏–Ω—Ç–µ–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                            voice_response_path = self.voice_synthesizer.text_to_speech(response)
                            
                            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                            with open(voice_response_path, 'rb') as voice_file:
                                await message.answer_voice(BufferedInputFile(voice_file.read(), 'voice.oga'))
                            
                            # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                            os.remove(voice_response_path)
                    elif output_type == OutputType.DEFAULT:
                        if response:
                            # –°–∏–Ω—Ç–µ–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                            voice_response_path = self.voice_synthesizer.text_to_speech(response)
                            
                            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                            with open(voice_response_path, 'rb') as voice_file:
                                await message.answer_voice(BufferedInputFile(voice_file.read(), 'voice.oga'))
                            
                            # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                            os.remove(voice_response_path)
                
                # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                os.remove(destination)
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    async def _cleanup_temp_audio_files(self):
        """
        –£–¥–∞–ª—è–µ—Ç –≤—Å–µ .wav —Ñ–∞–π–ª—ã –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            wav_files = glob.glob(os.path.join('temp', '*.wav'))
            for file_path in wav_files:
                try:
                    os.remove(file_path)
                    self.logger.info(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª: {file_path}")
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤: {e}")


    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        await self.dp.start_polling(self.bot)

async def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot = TelegramAssistantBot()
    await bot.start()

if __name__ == '__main__':
    asyncio.run(main())