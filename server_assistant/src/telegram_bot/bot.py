import os
import logging
from dotenv import load_dotenv
import telebot
from telebot.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
from src.neural_networks.guide_network import GuideNetwork
from src.neural_networks.deepseek_processor import DeepSeekProcessor
from src.neural_networks.openai_processor import OpenAIProcessor
from src.audio_processing.speech_recognition import AudioTranscriber
from src.audio_processing.voice_synthesis import VoiceSynthesizer
from src.utils.user_preferences import UserPreferences

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class TelegramAssistantBot:
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –∏ –±–æ—Ç–∞
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not self.token:
            raise ValueError("Telegram Bot Token –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        self.bot = telebot.TeleBot(self.token)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.guide_network = GuideNetwork()
        self.audio_transcriber = AudioTranscriber()
        self.voice_synthesizer = VoiceSynthesizer()
        self.user_preferences = UserPreferences()
        
        # –°–ª–æ–≤–∞—Ä—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
        self.llm_processors = {
            'deepseek': DeepSeekProcessor(),
            'openai': OpenAIProcessor()
        }
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._register_handlers()

    def _process_message(self, text: str, user_id: int) -> str:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º
        
        :param text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        model = self.user_preferences.get_llm_model(user_id)
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        processor = self.llm_processors.get(model, self.llm_processors['deepseek'])
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        response = processor.process_with_retry(text)
        
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç None –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏, –ø—Ä–æ–±—É–µ–º OpenAI
        if (response is None or 
            (isinstance(response, str) and "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å—Ä–µ–¥—Å—Ç–≤–∞" in response)):
            
            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç {model}, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ OpenAI")
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ OpenAI
            processor = self.llm_processors['openai']
            response = processor.process_with_retry(text)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if response is not None:
                self.user_preferences.set_llm_model(user_id, 'openai')
                self.logger.info(f"–ú–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞ OpenAI")
        
        return response

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        @self.bot.message_handler(commands=['start', 'help'])
        def send_welcome(message: Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help"""
            welcome_text = (
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. \n\n"
                "–ú–æ–≥—É –ø–æ–º–æ—á—å —Å:\n"
                "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏\n"
                "‚Ä¢ –†–µ—à–µ–Ω–∏–µ–º –∑–∞–¥–∞—á\n"
                "‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ–º\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ /select_model - –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –ò–ò\n"
                "‚Ä¢ /switch_model - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–æ–¥–µ–ª—å\n"
                "‚Ä¢ /check_balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å API\n\n"
                "–û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è!"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∂–∏–º–∞–º–∏
            markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
            markup.add(
                KeyboardButton('üîä –ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º'),
                KeyboardButton('üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º')
            )
            
            self.bot.reply_to(message, welcome_text, reply_markup=markup)

        @self.bot.message_handler(commands=['select_model'])
        def select_model(message: Message):
            """–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ LLM"""
            markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
            markup.add(
                KeyboardButton('ü§ñ DeepSeek'),
                KeyboardButton('üåê ChatGPT')
            )
            self.bot.reply_to(
                message, 
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤:", 
                reply_markup=markup
            )

        @self.bot.message_handler(func=lambda message: message.text in ['ü§ñ DeepSeek', 'üåê ChatGPT'])
        def set_model(message: Message):
            """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
            model_map = {
                'ü§ñ DeepSeek': 'deepseek',
                'üåê ChatGPT': 'openai'
            }
            model_name = model_map.get(message.text, 'deepseek')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ API-–∫–ª—é—á–∞
            processor = self.llm_processors[model_name]
            if processor.validate_api_key():
                self.user_preferences.set_llm_model(message.from_user.id, model_name)
                model_info = processor.get_model_info()
                
                response = (
                    f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model_info['name']}\n"
                    f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {model_info['provider']}\n"
                    f"–ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {model_info['default_model']}"
                )
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                markup = ReplyKeyboardRemove()
                self.bot.reply_to(message, response, reply_markup=markup)
            else:
                self.bot.reply_to(
                    message, 
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å API-–∫–ª—é—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
                )

        @self.bot.message_handler(commands=['switch_model'])
        def switch_model(message: Message):
            """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏"""
            user_id = message.from_user.id
            current_model = self.user_preferences.get_llm_model(user_id)
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å
            new_model = 'openai' if current_model == 'deepseek' else 'deepseek'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ API-–∫–ª—é—á–∞
            new_processor = self.llm_processors[new_model]
            if new_processor.validate_api_key():
                self.user_preferences.set_llm_model(user_id, new_model)
                model_info = new_processor.get_model_info()
                
                response = (
                    f"üîÑ –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞ {model_info['name']}\n"
                    f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {model_info['provider']}"
                )
                self.bot.reply_to(message, response)
            else:
                self.bot.reply_to(
                    message, 
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ {new_model}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á."
                )

        @self.bot.message_handler(commands=['check_balance'])
        def check_balance(message: Message):
            """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏"""
            user_id = message.from_user.id
            model = self.user_preferences.get_llm_model(user_id)
            
            processor = self.llm_processors.get(model, self.llm_processors['deepseek'])
            
            if model == 'deepseek':
                if processor.validate_api_key():
                    self.bot.reply_to(message, "‚úÖ DeepSeek: API-–∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω")
                else:
                    self.bot.reply_to(message, "‚ùå DeepSeek: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–ª—é—á–æ–º")
            elif model == 'openai':
                if processor.validate_api_key():
                    self.bot.reply_to(message, "‚úÖ OpenAI: API-–∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω")
                else:
                    self.bot.reply_to(message, "‚ùå OpenAI: –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–ª—é—á–æ–º")

        @self.bot.message_handler(func=lambda message: message.text == 'üîä –ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º')
        def voice_mode(message: Message):
            """–í–∫–ª—é—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
            self.user_preferences.set_user_mode(message.from_user.id, 'voice')
            self.bot.reply_to(
                message, 
                "‚úÖ –í–∫–ª—é—á–µ–Ω –≥–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º. –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏."
            )

        @self.bot.message_handler(func=lambda message: message.text == 'üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º')
        def text_mode(message: Message):
            """–í–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
            self.user_preferences.set_user_mode(message.from_user.id, 'text')
            self.bot.reply_to(
                message, 
                "‚úÖ –í–∫–ª—é—á–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º. –Ø –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏."
            )

        @self.bot.message_handler(content_types=['text'])
        def handle_text_message(message: Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            try:
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.username}: {message.text}")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                response = self._process_message(message.text, message.from_user.id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
                if not response:
                    response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_mode = self.user_preferences.get_user_mode(message.from_user.id)
                
                if user_mode == 'voice':
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç
                    voice_response = self.voice_synthesizer.text_to_speech(
                        response, 
                        output_file=f'temp_response_{message.message_id}.ogg'
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç
                    if voice_response:
                        with open(voice_response, 'rb') as voice:
                            self.bot.send_voice(message.chat.id, voice)
                        os.remove(voice_response)
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                    self.bot.reply_to(message, response)
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç: {response}")
            
            except Exception as e:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
                error_message = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
                self.bot.reply_to(message, error_message)
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)

        @self.bot.message_handler(content_types=['voice'])
        def handle_voice_message(message: Message):
            try:
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –ø—É—Ç–∏
                base_dir = os.path.dirname(os.path.abspath(__file__))
                project_root = os.path.abspath(os.path.join(base_dir, '..', '..'))
                temp_dir = os.path.join(project_root, 'temp')
                
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –ø–æ–ª–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
                os.makedirs(temp_dir, mode=0o777, exist_ok=True)
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                voice_file = self.bot.get_file(message.voice.file_id)
                downloaded_file = self.bot.download_file(voice_file.file_path)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Å –ø–æ–ª–Ω—ã–º –ø—É—Ç–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                voice_path = os.path.join(temp_dir, f'temp_voice_{message.message_id}.oga')
                
                # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—É—Ç–µ–π
                logger.info(f"Base directory: {base_dir}")
                logger.info(f"Project root: {project_root}")
                logger.info(f"Temp directory: {temp_dir}")
                logger.info(f"Voice file path: {voice_path}")
                
                try:
                    with open(voice_path, 'wb') as new_file:
                        new_file.write(downloaded_file)
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
                    if not os.path.exists(voice_path):
                        raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω: {voice_path}")
                    
                    file_size = os.path.getsize(voice_path)
                    logger.info(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
                    
                    if file_size == 0:
                        raise ValueError("–§–∞–π–ª –ø—É—Å—Ç–æ–π")
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                    raise
                
                # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
                text = self.audio_transcriber.transcribe_audio(voice_path)
                
                # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                response = self._process_message(text, message.from_user.id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
                if not response:
                    response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç
                voice_response = self.voice_synthesizer.text_to_speech(
                    response, 
                    output_file=os.path.join(temp_dir, f'temp_response_{message.message_id}.oga')
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç
                if voice_response:
                    with open(voice_response, 'rb') as voice:
                        self.bot.send_voice(message.chat.id, voice)
                    os.remove(voice_response)
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                os.remove(voice_path)
                
                # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –æ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
                self._cleanup_temp_audio_files(temp_dir)
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
                self.bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

    def _cleanup_temp_audio_files(self, temp_dir: str):
        """
        –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –æ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
        
        :param temp_dir: –ü—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        """
        try:
            # –°–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            audio_extensions = ['.wav', '.oga', '.ogg', '.mp3']
            
            # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            deleted_files = 0
            total_files = 0
            
            # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            for filename in os.listdir(temp_dir):
                file_path = os.path.join(temp_dir, filename)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ñ–∞–π–ª –∏ –∏–º–µ–µ—Ç –∞—É–¥–∏–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
                if os.path.isfile(file_path) and any(filename.lower().endswith(ext) for ext in audio_extensions):
                    total_files += 1
                    try:
                        os.remove(file_path)
                        deleted_files += 1
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {filename}: {e}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if total_files > 0:
                logger.info(f"–û—á–∏—â–µ–Ω–æ {deleted_files} –∏–∑ {total_files} –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}", exc_info=True)

    def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞")
            self.bot.polling(none_stop=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        bot = TelegramAssistantBot()
        bot.start()
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)

if __name__ == '__main__':
    main()